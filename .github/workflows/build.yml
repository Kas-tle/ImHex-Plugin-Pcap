name: Build

on:
  push:
    branches: ["*"]
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:

  # Windows build
  win:
    runs-on: windows-2022
    name: 🪟 Windows MINGW64
    defaults:
      run:
        shell: msys2 {0}
    env:
      CCACHE_DIR:      "${{ github.workspace }}/.ccache"
      CCACHE_MAXSIZE:  "1000M"
      CCACHE_COMPRESS: "true"
    steps:
    - name: 🧰 Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: 📜 Setup ccache
      uses:  hendrikmuhs/ccache-action@v1.2
      id:    cache-ccache
      with:
        key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build
        max-size: 1G

    - name: 📜 Restore CMakeCache
      uses:  actions/cache@v3
      with:
        path: |
          build/CMakeCache.txt
        key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build-${{ hashFiles('**/CMakeLists.txt') }}

    - name: 🟦 Install msys2
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        pacboy: >-
          gcc:p
          lld:p
          cmake:p
          make:p
          ccache:p
          glfw:p
          file:p
          mbedtls:p
          freetype:p
          dlfcn:p
          libbacktrace:p
          libpcap:p

    # Windows cmake build
    - name: 🛠️ Build
      run: |
        mkdir -p build
        cd build

        cmake -G "MinGW Makefiles"                      \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE                \
          -DCREATE_PACKAGE=ON                           \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache            \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache          \
          -DCMAKE_C_FLAGS="-fuse-ld=lld"                \
          -DCMAKE_CXX_FLAGS="-fuse-ld=lld"              \
          -DIMHEX_PATTERNS_PULL_MASTER=ON               \
          -DIMHEX_COMMIT_HASH_SHORT="${GITHUB_SHA::7}"  \
          -DIMHEX_COMMIT_HASH_LONG="${GITHUB_SHA}"      \
          -DIMHEX_COMMIT_BRANCH="${GITHUB_REF##*/}"     \
          ..
        mingw32-make -j4
        
        rm plugins/builtin.hexplug
        rm plugins/windows.hexplug

    - name: ⬆️ Upload Windows x86_64 artifact
      uses: actions/upload-artifact@v3
      with:
        name: Windows Plugin
        path: |
          build/plugins/*.hexplug

  # MacOS build
  macos:
    runs-on: macos-12
    name: 🍎 macOS 12.0

    strategy:
      fail-fast: false
      matrix:
        include:
          - suffix: "-NoGPU"
            custom_glfw: true
          - suffix: ""
            custom_glfw: false

    steps:
    - name: 🧰 Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: 📜 Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build
        max-size: 50M

    - name: 📜 Restore CMakeCache
      uses: actions/cache@v3
      with:
        path: |
          build/CMakeCache.txt
        key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build-${{ hashFiles('**/CMakeLists.txt') }}

    - name: ⬇️ Install dependencies
      run: |
        brew install mbedtls nlohmann-json cmake ccache freetype2 libmagic pkg-config curl gcc@12 llvm glfw ninja
        brew install libpcap 
        rm -rf /usr/local/Cellar/capstone

    # MacOS cmake build
    - name: 🛠️ Build
      run: |
        mkdir -p build
        cd build
        CC=$(brew --prefix gcc@12)/bin/gcc-12                                                       \
        CXX=$(brew --prefix gcc@12)/bin/g++-12                                                      \
        OBJC=$(brew --prefix llvm)/bin/clang                                                        \
        OBJCXX=$(brew --prefix llvm)/bin/clang++                                                    \
        PKG_CONFIG_PATH="$(brew --prefix openssl)/lib/pkgconfig":"$(brew --prefix)/lib/pkgconfig"   \
        MACOSX_DEPLOYMENT_TARGET="12.0"                                                            \
        cmake                                                                                       \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE                                                            \
          -DCREATE_BUNDLE=ON                                                                        \
          -DCREATE_PACKAGE=ON                                                                       \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache                                                        \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache                                                      \
          -DCMAKE_OBJC_COMPILER_LAUNCHER=ccache                                                     \
          -DCMAKE_OBJCXX_COMPILER_LAUNCHER=ccache                                                   \
          -DIMHEX_PATTERNS_PULL_MASTER=ON                                                           \
          -DIMHEX_COMMIT_HASH_SHORT="${GITHUB_SHA::7}"                                              \
          -DIMHEX_COMMIT_HASH_LONG="${GITHUB_SHA}"                                                  \
          -DIMHEX_COMMIT_BRANCH="${GITHUB_REF##*/}"                                                 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="12.0"                                                     \
          -DCPACK_PACKAGE_FILE_NAME="imhex-macOS-x86_64"                                            \
          ..
        make -j4

    - name: ⬆️ Upload macOS x86_64 artifact
      uses: actions/upload-artifact@v3
      with:
        name: macOS Plugin
        path: |
          build/imhex.app/Contents/MacOS/plugins/pcaps.hexplug

  macos-arm64-build:
    runs-on: ubuntu-22.04
    name: 🍎 macOS 12.1 arm64
    outputs:
      IMHEX_VERSION: ${{ steps.build.outputs.IMHEX_VERSION }}
    steps:
    - name: 🧰 Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: 📁 Restore docker /cache
      uses: actions/cache@v3
      with:
        path: cache
        key: build-macos-arm64-cache

    - name: 🐳 Inject /cache into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.2 # Doesn't work with a MacOS runner ?
      with:
        cache-source: cache
        cache-target: /cache

    - name: 🛠️ Build using docker
      id: build
      run: |
        echo "IMHEX_VERSION=`cat VERSION`" >> $GITHUB_OUTPUT
        docker buildx build . -f dist/macOS/arm64.Dockerfile --progress=plain --build-arg 'JOBS=4' --build-arg "BUILD_TYPE=$(BUILD_TYPE)" --build-context imhex=$(pwd) --output out

    - name: ⬆️ Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos_arm64_intermediate
        path: out/

      # See https://github.com/actions/cache/issues/342#issuecomment-1711054115
    - name: 🗑️ Delete old cache
      continue-on-error: true
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "build-macos-arm64-cache" --confirm || true

  macos-arm64-package:
    runs-on: macos-12
    name: 🍎 macOS 12.1 arm64 Packaging
    needs: macos-arm64-build
    env:
      IMHEX_VERSION: ${{ needs.macos-arm64-build.outputs.IMHEX_VERSION }}
    steps:
      - name: ⬇️ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_arm64_intermediate
          path: out

      - name: 🗑️ Delete artifact
        uses: geekyeggo/delete-artifact@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: macos_arm64_intermediate

      - name: ✒️ Fix Signature
        run: |
          set -x
          cd out
          codesign --remove-signature ImHex.app
          codesign --force --deep --sign - ImHex.app

      - name: 📁 Fix permissions
        run: |
          set -x
          cd out
          chmod -R 755 ImHex.app/

      - name: ⬆️ Upload macOS ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS Plugin
          path: |
            out/imhex.app/Contents/MacOS/plugins/pcaps.hexplug
  

  # Ubuntu build
  ubuntu:
    runs-on: ubuntu-22.04
    name: 🐧 Ubuntu 22.04
    steps:

      - name: 🧰 Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: 📜 Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build
          max-size: 50M

      - name: 📜 Restore CMakeCache
        uses: actions/cache@v3
        with:
          path: |
            build/CMakeCache.txt
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-build-${{ hashFiles('**/CMakeLists.txt') }}

      - name: ⬇️ Install dependencies
        run: |
          sudo apt update
          if ! which pkg-config
          then
              PKGCONF="pkgconf"
          fi
          
          sudo apt install -y \
            build-essential       \
            gcc-12                \
            g++-12                \
            lld                   \
            ${PKGCONF:-}          \
            cmake                 \
            ccache                \
            libglfw3-dev          \
            libglm-dev            \
            libmagic-dev          \
            libmbedtls-dev        \
            libfreetype-dev       \
            libdbus-1-dev         \
            libcurl4-gnutls-dev   \
            libgtk-3-dev          \
            ninja-build

          sudo apt install -y libpcap-dev

      # Ubuntu cmake build
      - name: 🛠️ Build
        run: |
          mkdir -p build
          cd build
          CC=gcc-12 CXX=g++-12 cmake                      \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE                \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache            \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache          \
            -DIMHEX_PATTERNS_PULL_MASTER=ON               \
            -DIMHEX_COMMIT_HASH_SHORT="${GITHUB_SHA::7}"  \
            -DIMHEX_COMMIT_HASH_LONG="${GITHUB_SHA}"      \
            -DIMHEX_COMMIT_BRANCH="${GITHUB_REF##*/}"     \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON       \
            ..
          make -j4

      - name: ⬆️ Upload Debian x86_64 artifact
        uses: actions/upload-artifact@v3
        with:
          name: Ubuntu Plugin
          path: build/*.hexplug

  # ArchLinux build
  archlinux-build:
    name: 🐧 ArchLinux
    runs-on: ubuntu-latest

    container:
      image: archlinux:base-devel

    steps:
      - name: ⬇️ Update all packages
        run: |
          pacman -Syyu --noconfirm

      - name: ⬇️ Install setup dependencies
        run: |
          pacman -Syu git ccache --noconfirm

      - name: 🧰 Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: ⬇️ Install ImHex dependencies
        run: |
          pacman -S --noconfirm --needed \
            cmake     \
            gcc       \
            lld       \
            glfw      \
            file      \
            mbedtls   \
            freetype2 \
            dbus      \
            gtk3      \
            curl      \
            fmt       \
            yara      \
            nlohmann-json \
            ninja

          pacman -S --noconfirm libpcap

      - name: 📜 Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: archlinux-${{ secrets.CACHE_VERSION }}-build-${{ github.run_id }}
          restore-keys: archlinux-${{ secrets.CACHE_VERSION }}-build
          max-size: 50M

      - name: 📜 Restore CMakeCache
        uses: actions/cache@v3
        with:
          path: |
            build/CMakeCache.txt
          key: archlinux-${{ secrets.CACHE_VERSION }}-build-${{ hashFiles('**/CMakeLists.txt') }}

      # ArchLinux cmake build
      - name: 🛠️ Build
        run: |
          mkdir -p build
          cd build
          CC=gcc CXX=g++ cmake                          \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE                \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache            \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache          \
          -DIMHEX_PATTERNS_PULL_MASTER=ON               \
          -DIMHEX_COMMIT_HASH_SHORT="${GITHUB_SHA::7}"  \
          -DIMHEX_COMMIT_HASH_LONG="${GITHUB_SHA}"      \
          -DIMHEX_COMMIT_BRANCH="${GITHUB_REF##*/}"     \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON       \
          ..
          make -j4

      - name: ⬆️ Upload ArchLinux x86_64 artifact
        uses: actions/upload-artifact@v3
        with:
          name: ArchLinux Plugin
          path: |
            build/*.hexplug
